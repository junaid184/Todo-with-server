{"version":3,"sources":["firebase_config.js","App.js","reportWebVitals.js","index.js"],"names":["db","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getFirestore","submitFunction","values","a","addDoc","collection","alert","validationSchema","yup","todoItem","required","App","useState","Todo","setTodo","getDocs","querySnapshot","todo","forEach","doc","console","log","data","push","useEffect","getTodos","formik","useFormik","initialValues","onSubmit","className","handleSubmit","TextField","variant","label","type","name","value","onChange","handleChange","error","touched","Boolean","errors","helperText","map","eachTodo","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSAmBMA,GAFMC,YAVW,CACrBC,OAAQ,0CACRC,WAAY,yCACZC,UAAW,yBACXC,cAAe,qCACfC,kBAAmB,eACnBC,MAAO,8CAMEC,e,OCZLC,EAAc,uCAAG,WAAOC,GAAP,SAAAC,EAAA,+EAEEC,YAAOC,YAAWb,EAAI,SAAUU,GAFlC,cAGnBI,MAAM,8DAHa,gDAKnBA,MAAM,0BAAD,MALc,yDAAH,sDAQdC,EAAmBC,IAAW,CAClCC,SAASD,IACD,iCACPE,SAAS,4BAgEGC,MA9Df,WAEE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAFa,4CAUb,8BAAAX,EAAA,sEAC8BY,YAAQV,YAAWb,EAAI,UADrD,OACQwB,EADR,OAEMC,EAAO,GACXD,EAAcE,SAAQ,SAACC,GACrBC,QAAQC,IAAIF,EAAIG,OAAOb,UACvBQ,EAAKM,KAAKJ,EAAIG,WAEhBR,EAAQG,GACRG,QAAQC,IAAIR,GARd,4CAVa,sBAGbW,qBAAU,WAER,OALW,mCAIXC,GACO,WACLL,QAAQC,IAAI,cAEb,IAaH,IAAMK,EAASC,YAAU,CACvBpB,iBAAkBA,EAClBqB,cAAe,CACbnB,SAAW,IAGboB,SAAU5B,IAEZ,OACE,sBAAK6B,UAAU,MAAf,UACE,oDACA,sBAAMD,SAAUH,EAAOK,aAAvB,SACE,cAACC,EAAA,EAAD,CACAC,QAAQ,WACRC,MAAM,WACNC,KAAK,OACLC,KAAK,WACLC,MAAOX,EAAOxB,OAAOO,SACrB6B,SAAUZ,EAAOa,aACjBC,MAAOd,EAAOe,QAAQhC,UAAYiC,QAAQhB,EAAOiB,OAAOlC,UACxDmC,WAAYlB,EAAOe,QAAQhC,UAAYiB,EAAOiB,OAAOlC,aAIvD,8BAEII,EAAKgC,KAAI,SAACC,EAAUC,GAClB,OACE,+BACE,mCAAMD,EAASrC,SAAf,OACA,yBAFOsC,YCzDRC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a1315bf8.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBzLRgWACU9QIlOJMBgn38FWkKYsZatWjg\",\r\n  authDomain: \"todo-application-react.firebaseapp.com\",\r\n  projectId: \"todo-application-react\",\r\n  storageBucket: \"todo-application-react.appspot.com\",\r\n  messagingSenderId: \"768218016703\",\r\n  appId: \"1:768218016703:web:2b6b5241107c89cc170f0a\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n\r\nconst db = getFirestore();\r\n\r\nexport {db}; ","import { useFormik } from 'formik';\nimport './App.css';\nimport * as yup from 'yup';\nimport TextField from '@mui/material/TextField';\nimport {db} from './firebase_config.js';\nimport { collection, addDoc, getDocs  } from \"firebase/firestore\"; \nimport { useEffect, useState } from 'react';\nconst submitFunction = async (values)=>{\n  try {\n    const docRef = await addDoc(collection(db, \"Todos\"), values);\n    alert(\"Todo item is added please reload the page to see todo list\");\n  } catch (e) { \n    alert(\"Error adding document: \", e);\n  }\n}\nconst validationSchema = yup.object({\n  todoItem:yup\n  .string('this field is for String only')\n  .required('this field is required')\n})\nfunction App() {\n  \n  const [Todo, setTodo] = useState([]);\n  useEffect(() => {\n    getTodos()\n    return () => {\n      console.log(\"cleanup\")\n    }\n  }, [])\n\n  async function getTodos(){\n    const querySnapshot = await getDocs(collection(db, \"Todos\"));\n    let todo = [];\n    querySnapshot.forEach((doc)=>{\n      console.log(doc.data().todoItem);\n      todo.push(doc.data());\n    })\n    setTodo(todo);\n    console.log(Todo);\n  }\n   \n  const formik = useFormik({\n    validationSchema: validationSchema,\n    initialValues :{\n      todoItem : ''\n    },\n\n    onSubmit: submitFunction\n  });\n  return (\n    <div className=\"App\">\n      <h1> Todo Application </h1>\n      <form onSubmit={formik.handleSubmit}>\n        <TextField \n        variant=\"standard\" \n        label=\"Add Todo\" \n        type=\"text\" \n        name=\"todoItem\"\n        value={formik.values.todoItem}\n        onChange={formik.handleChange}\n        error={formik.touched.todoItem && Boolean(formik.errors.todoItem)}\n        helperText={formik.touched.todoItem && formik.errors.todoItem}/>\n        {/* <Button variant=\"contained\" color=\"success\" type=\"submit\">Add</Button> */}\n      </form>\n\n      <div>\n        {\n          Todo.map((eachTodo, i)=>{\n            return(\n              <ul key={i}>\n                <li> {eachTodo.todoItem} </li>\n                <hr/>\n              </ul>\n            )\n          })\n        }\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}